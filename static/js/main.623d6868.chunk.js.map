{"version":3,"sources":["Site.module.css","App.js","index.js"],"names":["module","exports","App","props","formData","FormData","temp","chipclasses","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","useStyles","requestOptions","method","mode","body","console","log","useState","value","selectedOption","setSelectedOption","selectedText","setSelectedText","selectedValue","setSelectedValue","class","classes","main","header","title","maintext","box","resulttext","type","style","width","height","background","color","fontSize","float","onChange","e","target","Chip","size","label","onClick","append","fetch","then","response","json","result","Math","round","ReactDOM","render","document","getElementById"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,OAAS,qBAAqB,MAAQ,oBAAoB,SAAW,uBAAuB,WAAa,yBAAyB,IAAM,kBAAkB,QAAU,sBAAsB,KAAO,mBAAmB,YAAc,0BAA0B,OAAS,qBAAqB,YAAc,0BAA0B,aAAe,2BAA2B,mBAAqB,iCAAiC,QAAU,sBAAsB,OAAS,qBAAqB,MAAQ,oBAAoB,QAAU,sBAAsB,UAAY,wBAAwB,MAAQ,oBAAoB,KAAO,mBAAmB,WAAa,yBAAyB,aAAe,2BAA2B,QAAU,sBAAsB,QAAU,sBAAsB,QAAU,sBAAsB,QAAU,wB,sJCuGv1BC,G,MA9FH,SAAAC,GACV,IAAIC,EAAW,IAAIC,SACfC,EAAO,EAYLC,EAXYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACV,QAAS,CACPC,OAAQL,EAAMM,QAAQ,SAKRC,GAEhBC,EAAiB,CACnBC,OAAQ,OACRC,KAAM,OACNC,KAAMhB,GAGViB,QAAQC,IAAIL,GACV,IAvBmB,EAqDyBM,mBAAS,CAACC,MAAO,KArD1C,mBAqDZC,EArDY,KAqDIC,EArDJ,OAsDqBH,mBAAS,CAACC,MAAO,0BAtDtC,mBAsDZG,EAtDY,KAsDEC,EAtDF,OAuDuBL,mBAAS,CAACC,MAAO,IAvDxC,mBAuDZK,EAvDY,KAuDGC,EAvDH,KAkErB,OAVET,QAAQC,IAAIG,GAWd,yBAAKM,MAAOC,IAAQC,MAClB,yBAAKF,MAAOC,IAAQE,QAClB,yBAAKH,MAAOC,IAAQG,OAAQ,gBAC5B,yBAAKJ,MAAOC,IAAQI,UAApB,qDAAgF,6BAAhF,oIAGA,yBAAKL,MAAOC,IAAQK,KACnB,yBAAKN,MAAOC,IAAQM,YACpB,8BACKC,KAAK,OACLf,MAAOG,EAAaH,MACpBgB,MAAO,CAACC,MAAM,OAAOC,OAAO,IAAIC,WAAW,QAAD,OAAS,GAAT,KAAgB,GAAhB,KAAuB,GAAvB,KAA8B,GAA9B,KAAoCC,MAAM,QAAQC,SAAS,GAAGC,MAAM,QAC9GC,SAAU,SAACC,GAAD,OAAMpB,EAAgB,CAACJ,MAAMwB,EAAEC,OAAOzB,YAGpD,yBAAKO,MAAOC,IAAQM,YACpB,6BAAK,6BACL,uBAAGE,MAAO,CAACI,MAAM,YAAjB,IAA+BnB,EAAeD,MAA9C,KACA,6BAHA,yDAIsD,6BAJtD,WAKQ,uBAAGgB,MAAO,CAACI,MAAM,YAAaf,EAAcL,OALpD,IAtCA,yBAAKO,MAAOxB,EAAYG,MACxB,kBAACwC,EAAA,EAAD,CAAMC,KAAK,MAAOC,MAAO,kBAAmBC,QAAS,kBAtBpCL,EAsBsDrB,EArBzEG,EAAiB,CAACN,MAAM,IACxBH,QAAQC,IAAI0B,GACZ5C,EAASkD,OAAO,OAAQN,EAAExB,OAC1BP,EAAiB,CACfC,OAAQ,OACRC,KAAM,OACNC,KAAMhB,GAERsB,EAAkBsB,QAClBO,MAAM,kDAAmDtC,GACxDuC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJrD,EAAOsD,KAAKC,MAAmB,IAAbF,EAAO,GAAG,IAAS,GACrC7B,EAAiB,CAACN,MAAMlB,OAdR,IAAC0C,WC3BvBc,IAASC,OACT,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEHC,SAASC,eAAe,S","file":"static/js/main.623d6868.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"keybutton\":\"Site_keybutton__2sK9G\",\"header\":\"Site_header__1BsI_\",\"title\":\"Site_title__24ZoS\",\"maintext\":\"Site_maintext__1Pgz1\",\"resulttext\":\"Site_resulttext__3_ewp\",\"box\":\"Site_box__2kYth\",\"textbox\":\"Site_textbox__22Mt_\",\"main\":\"Site_main__1OTxe\",\"TableHeader\":\"Site_TableHeader__S41sF\",\"button\":\"Site_button__39ztf\",\"TableSearch\":\"Site_TableSearch__2QN21\",\"mapContainer\":\"Site_mapContainer__3zGrE\",\"mapContainerhidden\":\"Site_mapContainerhidden__3qnUd\",\"topleft\":\"Site_topleft__1w1OF\",\"legend\":\"Site_legend__2RHlI\",\"table\":\"Site_table__2gVB0\",\"tooltip\":\"Site_tooltip__27Pae\",\"regionsel\":\"Site_regionsel__3r7oe\",\"popup\":\"Site_popup__2epon\",\"logo\":\"Site_logo__1hj-6\",\"buttondist\":\"Site_buttondist__2R-o1\",\"buttonActive\":\"Site_buttonActive__3fED2\",\"buttonW\":\"Site_buttonW__3BrO5\",\"buttonV\":\"Site_buttonV__bZOzn\",\"buttonA\":\"Site_buttonA__2OK72\",\"buttonR\":\"Site_buttonR__2ByJb\"};","import React, { useState, useRef, useEffect } from 'react';\r\nimport Select from 'react-select'\r\nimport './index.css';\r\nimport greendb from './greendb.json';\r\nimport wordlist from './wordlist.json';\r\nimport classes from './Site.module.css';\r\nimport { Badge, Chip } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StackGrid from \"react-stack-grid\";\r\n\r\nconst App = props => {\r\n  let formData = new FormData();\r\n  let temp = 0\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      flexWrap: 'wrap',\r\n      '& > *': {\r\n        margin: theme.spacing(0.5),\r\n      },\r\n    },\r\n  }));\r\n\r\n  const chipclasses = useStyles();\r\n\r\n  let requestOptions = {\r\n    method: 'POST',\r\n    mode: 'cors', // no-cors, *cors, same-origin,        \r\n    body: formData\r\n};\r\n\r\nconsole.log(requestOptions)\r\n  const handleClick = (e) => {  \r\n    setSelectedValue({value:0})\r\n    console.log(e)\r\n    formData.append('data', e.value);        \r\n    requestOptions = {\r\n      method: 'POST',\r\n      mode: 'cors', // no-cors, *cors, same-origin,        \r\n      body: formData\r\n      };        \r\n    setSelectedOption(e)            \r\n    fetch('https://tidy-arcade-230811.appspot.com/predict?', requestOptions)\r\n    .then(response => response.json())\r\n    .then(result => {      \r\n      temp = Math.round(result[0][0]*1000)/10\r\n      setSelectedValue({value:temp});\r\n    })\r\n    // formData.delete('data')\r\n}\r\n \r\n  const top5buttons = () => {\r\n    return (      \r\n      <div class={chipclasses.root}>\r\n      <Chip size='big'  label={'Submit the text'} onClick={() => handleClick(selectedText)} />\r\n      </div>\r\n    )\r\n  \r\n  }    \r\n\r\n{/* <button className={classes.buttonActive}>{e.Name}</button> */}\r\n\r\n  const [selectedOption, setSelectedOption] = useState({value: ''});\r\n  const [selectedText, setSelectedText] = useState({value: 'Input the text inside'});\r\n  const [selectedValue, setSelectedValue] = useState({value: 0});\r\n  console.log(selectedOption)\r\n  // +\"  \"+e.freq\r\n\r\n\r\n// console.log(counts)\r\n\r\n\r\n// console.log(selectedOption)\r\n\r\n  \r\nreturn (\r\n<div class={classes.main}>\r\n  <div class={classes.header}>\r\n    <div class={classes.title}>{\"IEA NLP TEST\"}</div>\r\n    <div class={classes.maintext}>7613 tweets were used for training the BERT model.<br/>Please type any text and then it will show how close it is that describing real disaster. And click the submit the text button.\r\n    </div>    \r\n  </div>\r\n    <div class={classes.box}>\r\n     <div class={classes.resulttext}>\r\n     <textarea\r\n          type=\"text\" \r\n          value={selectedText.value}\r\n          style={{width:\"100%\",height:300,background:`rgba(${43}, ${43}, ${43}, ${.8})`,color:'white',fontSize:32,float:'left'}}\r\n          onChange={(e) =>setSelectedText({value:e.target.value})}\r\n        />\r\n      </div>\r\n      <div class={classes.resulttext}>\r\n      <br/><br/>        \r\n      <b style={{color:'#e8ae40'}}> {selectedOption.value} </b>\r\n      <br/>\r\n      The probablity that above text is about real disaster <br/>\r\n      Result: <b style={{color:'#e8ae40'}}>{selectedValue.value}</b>%\r\n      {top5buttons()}</div>\r\n    </div>        \r\n</div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(    \r\n<BrowserRouter>\r\n    <App />\r\n</BrowserRouter>,\r\n document.getElementById('app'));\r\n"],"sourceRoot":""}