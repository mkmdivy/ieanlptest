{"ast":null,"code":"var _jsxFileName = \"C:\\\\greentech - Copy\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport Select from 'react-select';\nimport './index.css';\nimport greendb from './greendb.json';\nimport wordlist from './wordlist.json';\nimport classes from './Site.module.css';\nimport { Badge, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport StackGrid from \"react-stack-grid\";\nimport { Web, Videocam, Description, PictureAsPdf } from '@material-ui/icons';\n\nconst App = props => {\n  const handleClick = e => {\n    setSelectedOption({\n      value: e,\n      label: e\n    });\n  };\n\n  const top5buttons = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: chipclasses.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: 'Submit the text',\n      onClick: () => handleClick('text'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  {\n    /* <button className={classes.buttonActive}>{e.Name}</button> */\n  }\n  const [selectedOption, setSelectedOption] = useState({\n    value: '',\n    label: 'Search'\n  });\n  console.log(selectedOption); // +\"  \"+e.freq\n\n  const options = [];\n  const wordcount = [];\n  const wordAvoid = [\"THE\", \"OF\", \"IN\", \"AND\", \"TO\", \"FOR\", \"A\", \"IS\", \"WITH\", \"ON\", \"FROM\", \"-\", \"USING\", \"HOW\", \"BY\", \"NEW\", \"INTO\", \"AN\", \"&\", \"WHAT\", \"ABOUT\", 2020, \"ARE\", \"AT\", \"IT\", \"CHANGE\", \"FIRST\", 10, \"WORLD?????S\", \"USE\", \"OVER\", \"HAS\", \"|\", \"ONE\", 2019, \"TIME\", 2050, \"OR\", \"?????\", \":\"]; // wordlist.map(e => options.push({value: e.name, label: e.name}))\n\n  greendb.map(e => {\n    e.keyword = e.Name.toUpperCase().split(' '); // e.keyword.map(x => wordcount.push(x))    \n  }); // greendb.map(e => console.log(e.keyword))\n\n  const [web, setweb] = useState(true);\n  const [video, setvideo] = useState(true);\n  const [report, setreport] = useState(true);\n  const [article, setarticle] = useState(true);\n  let typelist = [];\n\n  if (web) {\n    typelist.push(\"Website\");\n  }\n\n  if (video) {\n    typelist.push(\"Video\");\n  }\n\n  if (report) {\n    typelist.push(\"Report\");\n  }\n\n  if (article) {\n    typelist.push(\"Article\");\n  }\n\n  console.log(typelist);\n  let result = selectedOption.value == '' ? greendb.filter(e => typelist.includes(e.Type)) : greendb.filter(e => typelist.includes(e.Type) && e.keyword.includes(selectedOption.value));\n  result.map(e => e.keyword.map(x => wordcount.push(x)));\n  const wordresult = wordcount.filter(e => !wordAvoid.includes(e)); // console.log(wordcount)\n\n  const counts = {};\n  wordresult.map(num => counts[num] = counts[num] ? counts[num] + 1 : 1); // console.log(counts)\n  // console.log(selectedOption)\n\n  const keysSorted = Object.keys(counts).sort(function (b, a) {\n    return counts[a] - counts[b];\n  });\n  console.log(keysSorted); // bar,me,you,foo\n\n  const freqSorted = Object.keys(counts).sort(function (b, a) {\n    return counts[a] - counts[b];\n  }).map(key => counts[key]);\n  console.log(freqSorted);\n  keysSorted.map((e, idx) => options.push({\n    value: e,\n    label: e + \" \" + freqSorted[idx]\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, \"IEA NLP TEST\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.maintext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, \"7613 tweets were used for training the model. BERT model in tensorflow was used for training.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 128\n    }\n  }), \"Please type any text and then it will show how close it is that describing real disaster. And click the submit the text button.\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.resulttext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    type: \"text\",\n    value: selectedOption.value,\n    style: {\n      width: \"100%\",\n      height: 300,\n      background: `rgba(${43}, ${43}, ${43}, ${.8})`,\n      color: 'white',\n      fontSize: 32,\n      float: 'left'\n    },\n    onChange: e => handleClick(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.resulttext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }\n  }), \"The probablity that the text is about real disaster Result: 55%\", top5buttons())));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/greentech - Copy/src/App.js"],"names":["React","useState","useRef","useEffect","Select","greendb","wordlist","classes","Badge","Chip","makeStyles","StackGrid","Web","Videocam","Description","PictureAsPdf","App","props","handleClick","e","setSelectedOption","value","label","top5buttons","chipclasses","root","selectedOption","console","log","options","wordcount","wordAvoid","map","keyword","Name","toUpperCase","split","web","setweb","video","setvideo","report","setreport","article","setarticle","typelist","push","result","filter","includes","Type","x","wordresult","counts","num","keysSorted","Object","keys","sort","b","a","freqSorted","key","idx","main","header","title","maintext","box","resulttext","width","height","background","color","fontSize","float","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,WAAxB,EAAqCC,YAArC,QAAwD,oBAAxD;;AAGA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAEnB,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACzBC,IAAAA,iBAAiB,CAAC;AAACC,MAAAA,KAAK,EAACF,CAAP;AAAUG,MAAAA,KAAK,EAACH;AAAhB,KAAD,CAAjB;AACD,GAFD;;AAIA,QAAMI,WAAW,GAAG,MAAM;AACxB,wBACE;AAAK,MAAA,KAAK,EAAEC,WAAW,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AAAO,MAAA,KAAK,EAAE,iBAAd;AAAiC,MAAA,OAAO,EAAE,MAAMP,WAAW,CAAC,MAAD,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADF;AAMD,GAPD;;AASF;AAAC;AAAiE;AAEhE,QAAM,CAACQ,cAAD,EAAiBN,iBAAjB,IAAsCnB,QAAQ,CAAC;AAACoB,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GAAD,CAApD;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ,EAlBmB,CAmBnB;;AACF,QAAMG,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,SAAS,GAAG,CAAC,KAAD,EAAO,IAAP,EAAY,IAAZ,EAAiB,KAAjB,EAAuB,IAAvB,EAA4B,KAA5B,EAAkC,GAAlC,EAAsC,IAAtC,EAA2C,MAA3C,EAAkD,IAAlD,EAAuD,MAAvD,EAA8D,GAA9D,EAAkE,OAAlE,EAA0E,KAA1E,EAAgF,IAAhF,EAAqF,KAArF,EAA2F,MAA3F,EAAkG,IAAlG,EAAuG,GAAvG,EAA2G,MAA3G,EAAkH,OAAlH,EAA0H,IAA1H,EAA+H,KAA/H,EAAqI,IAArI,EAA0I,IAA1I,EAA+I,QAA/I,EAAwJ,OAAxJ,EAAgK,EAAhK,EAAmK,aAAnK,EAAiL,KAAjL,EAAuL,MAAvL,EAA8L,KAA9L,EAAoM,GAApM,EAAwM,KAAxM,EAA8M,IAA9M,EAAmN,MAAnN,EAA0N,IAA1N,EAA+N,IAA/N,EAAoO,OAApO,EAA4O,GAA5O,CAAlB,CAtBqB,CAuBrB;;AAEA1B,EAAAA,OAAO,CAAC2B,GAAR,CAAYb,CAAC,IAAI;AACfA,IAAAA,CAAC,CAACc,OAAF,GAAUd,CAAC,CAACe,IAAF,CAAOC,WAAP,GAAqBC,KAArB,CAA2B,GAA3B,CAAV,CADe,CAEf;AACD,GAHD,EAzBqB,CA8BrB;;AAEA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBrC,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACsC,KAAD,EAAQC,QAAR,IAAoBvC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACwC,MAAD,EAASC,SAAT,IAAsBzC,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAC0C,OAAD,EAAUC,UAAV,IAAwB3C,QAAQ,CAAC,IAAD,CAAtC;AAEA,MAAI4C,QAAQ,GAAG,EAAf;;AACA,MAAGR,GAAH,EAAO;AAACQ,IAAAA,QAAQ,CAACC,IAAT,CAAc,SAAd;AAAyB;;AACjC,MAAGP,KAAH,EAAS;AAACM,IAAAA,QAAQ,CAACC,IAAT,CAAc,OAAd;AAAuB;;AACjC,MAAGL,MAAH,EAAU;AAACI,IAAAA,QAAQ,CAACC,IAAT,CAAc,QAAd;AAAwB;;AACnC,MAAGH,OAAH,EAAW;AAACE,IAAAA,QAAQ,CAACC,IAAT,CAAc,SAAd;AAAyB;;AACrCnB,EAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;AAEA,MAAIE,MAAM,GAAGrB,cAAc,CAACL,KAAf,IAAsB,EAAtB,GAA0BhB,OAAO,CAAC2C,MAAR,CAAe7B,CAAC,IAAK0B,QAAQ,CAACI,QAAT,CAAkB9B,CAAC,CAAC+B,IAApB,CAArB,CAA1B,GAA4E7C,OAAO,CAAC2C,MAAR,CAAe7B,CAAC,IAAK0B,QAAQ,CAACI,QAAT,CAAkB9B,CAAC,CAAC+B,IAApB,KAA6B/B,CAAC,CAACc,OAAF,CAAUgB,QAAV,CAAmBvB,cAAc,CAACL,KAAlC,CAAlD,CAAzF;AACA0B,EAAAA,MAAM,CAACf,GAAP,CAAWb,CAAC,IAAIA,CAAC,CAACc,OAAF,CAAUD,GAAV,CAAcmB,CAAC,IAAIrB,SAAS,CAACgB,IAAV,CAAeK,CAAf,CAAnB,CAAhB;AACA,QAAMC,UAAU,GAAGtB,SAAS,CAACkB,MAAV,CAAiB7B,CAAC,IAAI,CAACY,SAAS,CAACkB,QAAV,CAAmB9B,CAAnB,CAAvB,CAAnB,CA9CqB,CA+CrB;;AAGA,QAAMkC,MAAM,GAAG,EAAf;AAEAD,EAAAA,UAAU,CAACpB,GAAX,CAAesB,GAAG,IAAID,MAAM,CAACC,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAAN,GAAc,CAA5B,GAAgC,CAApE,EApDqB,CAuDrB;AAGA;;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,IAApB,CAAyB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOP,MAAM,CAACO,CAAD,CAAN,GAAUP,MAAM,CAACM,CAAD,CAAvB;AAA2B,GAAlE,CAAnB;AACAhC,EAAAA,OAAO,CAACC,GAAR,CAAY2B,UAAZ,EA5DqB,CA4DQ;;AAE7B,QAAMM,UAAU,GAAGL,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,IAApB,CAAyB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOP,MAAM,CAACO,CAAD,CAAN,GAAUP,MAAM,CAACM,CAAD,CAAvB;AAA2B,GAAlE,EAAoE3B,GAApE,CAAwE8B,GAAG,IAAIT,MAAM,CAACS,GAAD,CAArF,CAAnB;AACAnC,EAAAA,OAAO,CAACC,GAAR,CAAYiC,UAAZ;AAEAN,EAAAA,UAAU,CAACvB,GAAX,CAAe,CAACb,CAAD,EAAG4C,GAAH,KAAWlC,OAAO,CAACiB,IAAR,CAAa;AAACzB,IAAAA,KAAK,EAACF,CAAP;AAASG,IAAAA,KAAK,EAACH,CAAC,GAAC,GAAF,GAAM0C,UAAU,CAACE,GAAD;AAA/B,GAAb,CAA1B;AAIA,sBACA;AAAK,IAAA,KAAK,EAAExD,OAAO,CAACyD,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAEzD,OAAO,CAAC0D,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAE1D,OAAO,CAAC2D,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4B,cAA5B,CADF,eAEE;AAAK,IAAA,KAAK,EAAE3D,OAAO,CAAC4D,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mHAA2H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA3H,oIAFF,CADF,eAMI;AAAK,IAAA,KAAK,EAAE5D,OAAO,CAAC6D,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,KAAK,EAAE7D,OAAO,CAAC8D,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AACK,IAAA,IAAI,EAAC,MADV;AAEK,IAAA,KAAK,EAAE3C,cAAc,CAACL,KAF3B;AAGK,IAAA,KAAK,EAAE;AAACiD,MAAAA,KAAK,EAAC,MAAP;AAAcC,MAAAA,MAAM,EAAC,GAArB;AAAyBC,MAAAA,UAAU,EAAE,QAAO,EAAG,KAAI,EAAG,KAAI,EAAG,KAAI,EAAG,GAApE;AAAuEC,MAAAA,KAAK,EAAC,OAA7E;AAAqFC,MAAAA,QAAQ,EAAC,EAA9F;AAAiGC,MAAAA,KAAK,EAAC;AAAvG,KAHZ;AAIK,IAAA,QAAQ,EAAGxD,CAAD,IAAOD,WAAW,CAACC,CAAC,CAACyD,MAAF,CAASvD,KAAV,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADD,eASE;AAAK,IAAA,KAAK,EAAEd,OAAO,CAAC8D,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,qEAIC9C,WAAW,EAJZ,CATF,CANJ,CADA;AAyBC,CA9FD;;AAgGA,eAAeP,GAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport Select from 'react-select'\r\nimport './index.css';\r\nimport greendb from './greendb.json';\r\nimport wordlist from './wordlist.json';\r\nimport classes from './Site.module.css';\r\nimport { Badge, Chip } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StackGrid from \"react-stack-grid\";\r\nimport { Web, Videocam, Description, PictureAsPdf} from '@material-ui/icons';\r\n\r\n\r\nconst App = props => {\r\n\r\n  const handleClick = (e) => {        \r\n    setSelectedOption({value:e, label:e})            \r\n  }\r\n \r\n  const top5buttons = () => {\r\n    return (      \r\n      <div class={chipclasses.root}>\r\n      <Chip  label={'Submit the text'} onClick={() => handleClick('text')} />\r\n      </div>\r\n    )\r\n  \r\n  }    \r\n\r\n{/* <button className={classes.buttonActive}>{e.Name}</button> */}\r\n\r\n  const [selectedOption, setSelectedOption] = useState({value: '', label: 'Search'});\r\n  console.log(selectedOption)\r\n  // +\"  \"+e.freq\r\nconst options = []\r\nconst wordcount = []\r\nconst wordAvoid = [\"THE\",\"OF\",\"IN\",\"AND\",\"TO\",\"FOR\",\"A\",\"IS\",\"WITH\",\"ON\",\"FROM\",\"-\",\"USING\",\"HOW\",\"BY\",\"NEW\",\"INTO\",\"AN\",\"&\",\"WHAT\",\"ABOUT\",2020,\"ARE\",\"AT\",\"IT\",\"CHANGE\",\"FIRST\",10,\"WORLD?????S\",\"USE\",\"OVER\",\"HAS\",\"|\",\"ONE\",2019,\"TIME\",2050,\"OR\",\"?????\",\":\"]\r\n// wordlist.map(e => options.push({value: e.name, label: e.name}))\r\n\r\ngreendb.map(e => {\r\n  e.keyword=e.Name.toUpperCase().split(' ')\r\n  // e.keyword.map(x => wordcount.push(x))    \r\n})\r\n\r\n// greendb.map(e => console.log(e.keyword))\r\n\r\nconst [web, setweb] = useState(true);\r\nconst [video, setvideo] = useState(true);\r\nconst [report, setreport] = useState(true);\r\nconst [article, setarticle] = useState(true);\r\n\r\nlet typelist = []\r\nif(web){typelist.push(\"Website\")}\r\nif(video){typelist.push(\"Video\")}\r\nif(report){typelist.push(\"Report\")}\r\nif(article){typelist.push(\"Article\")}\r\nconsole.log(typelist)\r\n\r\nlet result = selectedOption.value==''? greendb.filter(e => (typelist.includes(e.Type))): greendb.filter(e => (typelist.includes(e.Type) && e.keyword.includes(selectedOption.value)))\r\nresult.map(e => e.keyword.map(x => wordcount.push(x)))\r\nconst wordresult = wordcount.filter(e => !wordAvoid.includes(e))\r\n// console.log(wordcount)\r\n\r\n\r\nconst counts = {};\r\n\r\nwordresult.map(num => counts[num] = counts[num] ? counts[num] + 1 : 1)\r\n\r\n\r\n// console.log(counts)\r\n\r\n\r\n// console.log(selectedOption)\r\nconst keysSorted = Object.keys(counts).sort(function(b,a){return counts[a]-counts[b]})\r\nconsole.log(keysSorted);     // bar,me,you,foo\r\n\r\nconst freqSorted = Object.keys(counts).sort(function(b,a){return counts[a]-counts[b]}).map(key => counts[key]);\r\nconsole.log(freqSorted);\r\n\r\nkeysSorted.map((e,idx) => options.push({value:e,label:e+\" \"+freqSorted[idx]}) )\r\n\r\n\r\n  \r\nreturn (\r\n<div class={classes.main}>\r\n  <div class={classes.header}>\r\n    <div class={classes.title}>{\"IEA NLP TEST\"}</div>\r\n    <div class={classes.maintext}>7613 tweets were used for training the model. BERT model in tensorflow was used for training.<br/>Please type any text and then it will show how close it is that describing real disaster. And click the submit the text button.\r\n    </div>    \r\n  </div>\r\n    <div class={classes.box}>\r\n     <div class={classes.resulttext}>\r\n     <textarea\r\n          type=\"text\" \r\n          value={selectedOption.value}\r\n          style={{width:\"100%\",height:300,background:`rgba(${43}, ${43}, ${43}, ${.8})`,color:'white',fontSize:32,float:'left'}}\r\n          onChange={(e) => handleClick(e.target.value)}\r\n        />\r\n      </div>\r\n      <div class={classes.resulttext}>\r\n      <br/><br/>        \r\n      The probablity that the text is about real disaster\r\n      Result: 55%\r\n      {top5buttons()}</div>\r\n    </div>    \r\n    \r\n</div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}