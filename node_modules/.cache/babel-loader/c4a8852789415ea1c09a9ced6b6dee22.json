{"ast":null,"code":"var _jsxFileName = \"C:\\\\greentech - Copy\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport Select from 'react-select';\nimport './index.css';\nimport greendb from './greendb.json';\nimport wordlist from './wordlist.json';\nimport classes from './Site.module.css';\nimport { Badge, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport StackGrid from \"react-stack-grid\";\nimport { Web, Videocam, Description, PictureAsPdf } from '@material-ui/icons';\n\nconst App = props => {\n  const useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n      '& > *': {\n        margin: theme.spacing(0.5)\n      }\n    }\n  }));\n  const chipclasses = useStyles();\n\n  const handleClick = e => {\n    setSelectedOption({\n      value: e,\n      label: e\n    });\n  };\n\n  const top5buttons = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: chipclasses.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: 'Submit the text',\n      onClick: () => handleClick('text'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  const dataPresent = input => {\n    return /*#__PURE__*/React.createElement(StackGrid, {\n      columnWidth: 230,\n      gutterWidth: 10,\n      gridRef: grid => grid = grid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, result.slice(0, 150).map((e, idx) => {\n      return /*#__PURE__*/React.createElement(\"a\", {\n        href: e.Link,\n        target: \"_blank\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 50\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        key: idx,\n        className: e.Type === \"Website\" ? classes.buttonW : e.Type === 'Video' ? classes.buttonV : e.Type === 'Article' ? classes.buttonA : classes.buttonR,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 83\n        }\n      }, e.Name.slice(0, 55), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: \"fixed\",\n          right: 5,\n          bottom: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 263\n        }\n      }, e.Type === \"Website\" ? /*#__PURE__*/React.createElement(Web, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 333\n        }\n      }) : e.Type === 'Video' ? /*#__PURE__*/React.createElement(Videocam, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 360\n        }\n      }) : e.Type === 'Article' ? /*#__PURE__*/React.createElement(Description, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 396\n        }\n      }) : /*#__PURE__*/React.createElement(PictureAsPdf, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 413\n        }\n      })), \" \"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 445\n        }\n      }));\n    }));\n  };\n\n  {\n    /* <button className={classes.buttonActive}>{e.Name}</button> */\n  }\n  const [selectedOption, setSelectedOption] = useState({\n    value: '',\n    label: 'Search'\n  });\n  console.log(selectedOption); // +\"  \"+e.freq\n\n  const options = [];\n  const wordcount = [];\n  const wordAvoid = [\"THE\", \"OF\", \"IN\", \"AND\", \"TO\", \"FOR\", \"A\", \"IS\", \"WITH\", \"ON\", \"FROM\", \"-\", \"USING\", \"HOW\", \"BY\", \"NEW\", \"INTO\", \"AN\", \"&\", \"WHAT\", \"ABOUT\", 2020, \"ARE\", \"AT\", \"IT\", \"CHANGE\", \"FIRST\", 10, \"WORLD?????S\", \"USE\", \"OVER\", \"HAS\", \"|\", \"ONE\", 2019, \"TIME\", 2050, \"OR\", \"?????\", \":\"]; // wordlist.map(e => options.push({value: e.name, label: e.name}))\n\n  greendb.map(e => {\n    e.keyword = e.Name.toUpperCase().split(' '); // e.keyword.map(x => wordcount.push(x))    \n  }); // greendb.map(e => console.log(e.keyword))\n\n  const [web, setweb] = useState(true);\n  const [video, setvideo] = useState(true);\n  const [report, setreport] = useState(true);\n  const [article, setarticle] = useState(true);\n  let typelist = [];\n\n  if (web) {\n    typelist.push(\"Website\");\n  }\n\n  if (video) {\n    typelist.push(\"Video\");\n  }\n\n  if (report) {\n    typelist.push(\"Report\");\n  }\n\n  if (article) {\n    typelist.push(\"Article\");\n  }\n\n  console.log(typelist);\n  let result = selectedOption.value == '' ? greendb.filter(e => typelist.includes(e.Type)) : greendb.filter(e => typelist.includes(e.Type) && e.keyword.includes(selectedOption.value));\n  result.map(e => e.keyword.map(x => wordcount.push(x)));\n  const wordresult = wordcount.filter(e => !wordAvoid.includes(e)); // console.log(wordcount)\n\n  const counts = {};\n  wordresult.map(num => counts[num] = counts[num] ? counts[num] + 1 : 1); // console.log(counts)\n  // console.log(selectedOption)\n\n  const keysSorted = Object.keys(counts).sort(function (b, a) {\n    return counts[a] - counts[b];\n  });\n  console.log(keysSorted); // bar,me,you,foo\n\n  const freqSorted = Object.keys(counts).sort(function (b, a) {\n    return counts[a] - counts[b];\n  }).map(key => counts[key]);\n  console.log(freqSorted);\n  keysSorted.map((e, idx) => options.push({\n    value: e,\n    label: e + \" \" + freqSorted[idx]\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, \"IEA NLP TEST\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.maintext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, \"7613 tweets were used for training the model. BERT model in tensorflow was used for training.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 128\n    }\n  }), \"Please type any text and then it will show how close it is that describing real disaster. And click the submit the text button.\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.resulttext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    type: \"text\",\n    value: selectedOption.value,\n    style: {\n      width: \"100%\",\n      height: 300,\n      background: `rgba(${43}, ${43}, ${43}, ${.8})`,\n      color: 'white',\n      fontSize: 32,\n      float: 'left'\n    },\n    onChange: e => handleClick(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.resulttext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 12\n    }\n  }), \"The probablity that the text is about real disaster Result: 55%\", top5buttons())));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/greentech - Copy/src/App.js"],"names":["React","useState","useRef","useEffect","Select","greendb","wordlist","classes","Badge","Chip","makeStyles","StackGrid","Web","Videocam","Description","PictureAsPdf","App","props","useStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","chipclasses","handleClick","e","setSelectedOption","value","label","top5buttons","dataPresent","input","grid","result","slice","map","idx","Link","Type","buttonW","buttonV","buttonA","buttonR","Name","position","right","bottom","selectedOption","console","log","options","wordcount","wordAvoid","keyword","toUpperCase","split","web","setweb","video","setvideo","report","setreport","article","setarticle","typelist","push","filter","includes","x","wordresult","counts","num","keysSorted","Object","keys","sort","b","a","freqSorted","key","main","header","title","maintext","box","resulttext","width","height","background","color","fontSize","float","target"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport Select from 'react-select'\r\nimport './index.css';\r\nimport greendb from './greendb.json';\r\nimport wordlist from './wordlist.json';\r\nimport classes from './Site.module.css';\r\nimport { Badge, Chip } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StackGrid from \"react-stack-grid\";\r\nimport { Web, Videocam, Description, PictureAsPdf} from '@material-ui/icons';\r\n\r\n\r\nconst App = props => {\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      flexWrap: 'wrap',\r\n      '& > *': {\r\n        margin: theme.spacing(0.5),\r\n      },\r\n    },\r\n  }));\r\n\r\n  const chipclasses = useStyles();\r\n\r\n\r\n \r\n\r\n  const handleClick = (e) => {        \r\n    setSelectedOption({value:e, label:e})            \r\n  }\r\n \r\n  const top5buttons = () => {\r\n    return (      \r\n      <div class={chipclasses.root}>\r\n      <Chip  label={'Submit the text'} onClick={() => handleClick('text')} />\r\n      </div>\r\n    )\r\n  \r\n  }    \r\n  \r\n  const dataPresent = (input) => {\r\n    return (\r\n      \r\n        <StackGrid\r\n        columnWidth={230}\r\n        gutterWidth={10}        \r\n        gridRef={grid=> grid = grid}\r\n        \r\n      >\r\n      {result.slice(0,150).map((e,idx)=> {return <a href={e.Link} target=\"_blank\"><button key={idx} className={e.Type===\"Website\"? classes.buttonW : e.Type==='Video'?  classes.buttonV : e.Type==='Article'?  classes.buttonA : classes.buttonR}>{e.Name.slice(0,55)}<div style={{position:\"fixed\",right:5,bottom:5}}>{e.Type===\"Website\"? <Web/> : e.Type==='Video'? <Videocam/>  : e.Type==='Article'?  <Description/> : <PictureAsPdf/>}</div> </button><br/></a>})}\r\n      </StackGrid>\r\n      \r\n    )\r\n  \r\n  }    \r\n\r\n{/* <button className={classes.buttonActive}>{e.Name}</button> */}\r\n\r\n  const [selectedOption, setSelectedOption] = useState({value: '', label: 'Search'});\r\n  console.log(selectedOption)\r\n  // +\"  \"+e.freq\r\nconst options = []\r\nconst wordcount = []\r\nconst wordAvoid = [\"THE\",\"OF\",\"IN\",\"AND\",\"TO\",\"FOR\",\"A\",\"IS\",\"WITH\",\"ON\",\"FROM\",\"-\",\"USING\",\"HOW\",\"BY\",\"NEW\",\"INTO\",\"AN\",\"&\",\"WHAT\",\"ABOUT\",2020,\"ARE\",\"AT\",\"IT\",\"CHANGE\",\"FIRST\",10,\"WORLD?????S\",\"USE\",\"OVER\",\"HAS\",\"|\",\"ONE\",2019,\"TIME\",2050,\"OR\",\"?????\",\":\"]\r\n// wordlist.map(e => options.push({value: e.name, label: e.name}))\r\n\r\ngreendb.map(e => {\r\n  e.keyword=e.Name.toUpperCase().split(' ')\r\n  // e.keyword.map(x => wordcount.push(x))    \r\n})\r\n\r\n// greendb.map(e => console.log(e.keyword))\r\n\r\nconst [web, setweb] = useState(true);\r\nconst [video, setvideo] = useState(true);\r\nconst [report, setreport] = useState(true);\r\nconst [article, setarticle] = useState(true);\r\n\r\nlet typelist = []\r\nif(web){typelist.push(\"Website\")}\r\nif(video){typelist.push(\"Video\")}\r\nif(report){typelist.push(\"Report\")}\r\nif(article){typelist.push(\"Article\")}\r\nconsole.log(typelist)\r\n\r\nlet result = selectedOption.value==''? greendb.filter(e => (typelist.includes(e.Type))): greendb.filter(e => (typelist.includes(e.Type) && e.keyword.includes(selectedOption.value)))\r\nresult.map(e => e.keyword.map(x => wordcount.push(x)))\r\nconst wordresult = wordcount.filter(e => !wordAvoid.includes(e))\r\n// console.log(wordcount)\r\n\r\n\r\nconst counts = {};\r\n\r\nwordresult.map(num => counts[num] = counts[num] ? counts[num] + 1 : 1)\r\n\r\n\r\n// console.log(counts)\r\n\r\n\r\n// console.log(selectedOption)\r\nconst keysSorted = Object.keys(counts).sort(function(b,a){return counts[a]-counts[b]})\r\nconsole.log(keysSorted);     // bar,me,you,foo\r\n\r\nconst freqSorted = Object.keys(counts).sort(function(b,a){return counts[a]-counts[b]}).map(key => counts[key]);\r\nconsole.log(freqSorted);\r\n\r\nkeysSorted.map((e,idx) => options.push({value:e,label:e+\" \"+freqSorted[idx]}) )\r\n\r\n\r\n  \r\nreturn (\r\n<div class={classes.main}>\r\n  <div class={classes.header}>\r\n    <div class={classes.title}>{\"IEA NLP TEST\"}</div>\r\n    <div class={classes.maintext}>7613 tweets were used for training the model. BERT model in tensorflow was used for training.<br/>Please type any text and then it will show how close it is that describing real disaster. And click the submit the text button.\r\n    </div>    \r\n  </div>\r\n    <div class={classes.box}>\r\n     <div class={classes.resulttext}>\r\n     <textarea\r\n          type=\"text\" \r\n          value={selectedOption.value}\r\n          style={{width:\"100%\",height:300,background:`rgba(${43}, ${43}, ${43}, ${.8})`,color:'white',fontSize:32,float:'left'}}\r\n          onChange={(e) => handleClick(e.target.value)}\r\n        />\r\n      </div>\r\n      <div class={classes.resulttext}>\r\n      <br/><br/>        \r\n      The probablity that the text is about real disaster\r\n      Result: 55%\r\n      {top5buttons()}</div>\r\n    </div>    \r\n    \r\n</div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}